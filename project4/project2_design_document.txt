         +--------------------------+
                     |    CS 140    |
         | PROJECT 2: USER PROGRAMS |
         |     DESIGN DOCUMENT      |
         +--------------------------+

---- GROUP ----

>> Fill in the names and email addresses of your group members.
KWON SANGMIN<ckasd456@unist.ac.kr>
---- PRELIMINARIES ----

>> If you have any preliminary comments on your submission, notes for the
>> TAs, or extra credit, please give them here.

>> Please cite any offline or online sources you consulted while
>> preparing your submission, other than the Pintos documentation, course
>> text, lecture notes, and course staff.

         ARGUMENT PASSING
         ================

---- DATA STRUCTURES ----

>> A1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.
NONE
---- ALGORITHMS ----

>> A2: Briefly describe how you implemented argument parsing.  How do
>> you arrange for the elements of argv[] to be in the right order?
>> How do you avoid overflowing the stack page?
at first i limit argv elements to 32. Because, in the manual they say that pintos can pass to the kernel only 128bytes. So, char* is 4byte -> 4*32=128bytes. by limiting size, i can avoid stack overflow
and then, by using strtok_r, i divided command line whenever " " is occur, and store it to argv[] array
as a result, i can complete argument parsing.
---- RATIONALE ----

>> A3: Why does Pintos implement strtok_r() but not strtok()?
strtok function is thread unsafe function. it means that if multiple thread use same function or variable, then threads can interrupt each others result.
Pintos has multiple threads. Thus, Pintos implement strtok_r() function to avoid interrupts between threads.

>> A4: In Pintos, the kernel separates commands into a executable name
>> and arguments.  In Unix-like systems, the shell does this
>> separation.  Identify at least two advantages of the Unix approach.
the shell is also a program. So, there is more step than pintos. This will give more safety environmental.
And, the shell give more user friendly commands by setting command alias.
Espectially, the shell has their own commands which make user controll the system more easily
           SYSTEM CALLS
           ============

---- DATA STRUCTURES ----

>> B1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

thread.h
1. struct thread* parent_ptr ->to track and check if there is parent process in child process
2. struct list child_list -> to track child processes in parent process -> can wait a child_process
3. struct semaphore wait_child -> to make parent process wait the child process -> can use make check
4. int exit_state -> to keep childs exit state and it make can return exit state at process_wait()
5. struct file* open_file[130] -> to keep fd list and file struct information
6. opening_num -> to keep higest fd number.
7. struct semaphore load_child -> to wait child process complete load function
8. struct file* Excuting_file -> to deny_write the Excuting file
9. int child_num -> record child_num
10. int is_parent_waiting -> flag for is parent waiting for child
11. struct semaphore wait_parent -> if child exit before parent wait the child block the child
12. int wp_sema -> flag for if child wait for parent's wait or not

>> B2: Describe how file descriptors are associated with open files.
>> Are file descriptors unique within the entire OS or just within a
>> single process?
i associate file descriptors with a thread(==process in pintos) by declaring the array
Actually, fd0, fd1 is already occupied by system. So, i set opening_num as 1. And, when i create the file i increase the number. So, the index of open_file array is file descriptor
So, my file descriptors are unique within a single process
---- ALGORITHMS ----

>> B3: Describe your code for reading and writing user data from the
>> kernel.
If want to read the data or write the data from kernel, then system call read() or write() is invoked. 
Before the system call functions be invoked, first open() function is executed.
By invoking filesys_open() function we can open the file, and we can read or write.
To prevent some crash between filesys function, i make filesys functions as critical session by using lock function which is located in synch.c

>> B4: Suppose a system call causes a full page (4,096 bytes) of data
>> to be copied from user space into the kernel.  What is the least
>> and the greatest possible number of inspections of the page table
>> (e.g. calls to pagedir_get_page()) that might result?  What about
>> for a system call that only copies 2 bytes of data?  Is there room
>> for improvement in these numbers, and how much?
the least number is 1page which has larger than or equal to 4,096bytes size.
the greatest number will be 4,096 pages which has just 1 byte size.
Because page size can be changed by programmer.
Thus if we have 2 bytes data. it will be better using 2 bytes size page than 1 byte size page
Because if we use just 1 byte size page, we should make 2 page, but if we use 2 bytes or more size page, it just required 1 page

>> B5: Briefly describe your implementation of the "wait" system call
>> and how it interacts with process termination.

>> B6: Any access to user program memory at a user-specified address
>> can fail due to a bad pointer value.  Such accesses must cause the
>> process to be terminated.  System calls are fraught with such
>> accesses, e.g. a "write" system call requires reading the system
>> call number from the user stack, then each of the call's three
>> arguments, then an arbitrary amount of user memory, and any of
>> these can fail at any point.  This poses a design and
>> error-handling problem: how do you best avoid obscuring the primary
>> function of code in a morass of error-handling?  Furthermore, when
>> an error is detected, how do you ensure that all temporarily
>> allocated resources (locks, buffers, etc.) are freed?  In a few
>> paragraphs, describe the strategy or strategies you adopted for
>> managing these issues.  Give an example.
I just check is the memory address below PHYS_BASE. if it is above PHYS_BASE then just call exit(-1)
Also, if there is any improper address is referenced It just call exit(-1) function.
And exit(-1) function call invoke thread_exit() function call and then it free the all resource.

---- SYNCHRONIZATION ----

>> B7: The "exec" system call returns -1 if loading the new executable
>> fails, so it cannot return before the new executable has completed
>> loading.  How does your code ensure this?  How is the load
>> success/failure status passed back to the thread that calls "exec"?
i use load_wait semaphore and load_state variable.
by using load_wait semaphore i make parent wait for load function is finished
when load function return value, then i record the status of load function at the load_state of parent process.

>> B8: Consider parent process P with child process C.  How do you
>> ensure proper synchronization and avoid race conditions when P
>> calls wait(C) before C exits?  After C exits?  How do you ensure
>> that all resources are freed in each case?  How about when P
>> terminates without waiting, before C exits?  After C exits?  Are
>> there any special cases?
i prevent child process exit before parent wait for child process by using wait_parent semaphore.
if C invoke exit function then C sema down wait_parent and when P wait for C, P sema up the wait_parent semaphore
And before process exit, i make the process wait for all child process.
So, i can ensure proper synchronization and avoid race coditions.

---- RATIONALE ----

>> B9: Why did you choose to implement access to user memory from the
>> kernel in the way that you did?
pintos manual said that "it gives more speedy system. because it takes advantage of the processor's MMU,
so it tends to be used in real kernels(including Linux)."
In addition, when i first look at the Accessing user memory part this technique is looks much easier and simpler to implement. So, i use this way.

>> B10: What advantages or disadvantages can you see to your design
>> for file descriptors?
Array file descriptors advantages is that easy to manage the files, do not require any additional functions to invoke file or append or delete file descriptor.
disadvantages is that it limit the number of file which each process can open, and has memory overhead which is not used.

>> B11: The default tid_t to pid_t mapping is the identity mapping.
>> If you changed it, what advantages are there to your approach?
i dont changed
         SURVEY QUESTIONS
         ================

Answering these questions is optional, but it will help us improve the
course in future quarters.  Feel free to tell us anything you
want--these questions are just to spur your thoughts.  You may also
choose to respond anonymously in the course evaluations at the end of
the quarter.

>> In your opinion, was this assignment, or any one of the three problems
>> in it, too easy or too hard?  Did it take too long or too little time?

>> Did you find that working on a particular part of the assignment gave
>> you greater insight into some aspect of OS design?

>> Is there some particular fact or hint we should give students in
>> future quarters to help them solve the problems?  Conversely, did you
>> find any of our guidance to be misleading?

>> Do you have any suggestions for the TAs to more effectively assist
>> students, either for future quarters or the remaining projects?

>> Any other comments?
